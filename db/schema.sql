-- ============================================
-- CinemaInfo 프로젝트 DB 스키마 초기화 스크립트
-- ============================================

-- 1. 기존 트리거 / 테이블 삭제
BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER trg_update_avg_rating';
EXCEPTION
    WHEN OTHERS THEN IF SQLCODE != -4080 THEN RAISE; END IF;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE reviews CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE movies CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE users CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

-- ============================================
-- 2. 테이블 생성
-- ============================================
CREATE TABLE movies (
    movie_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    image_path VARCHAR2(500),
    release_date DATE,
    duration NUMBER(5) CHECK (duration > 0),
    audience NUMBER(10) DEFAULT 0,
    film_rating VARCHAR2(30),
    genre VARCHAR2(50),
    country VARCHAR2(50),
    director VARCHAR2(100),
    main_actor VARCHAR2(100),
    description VARCHAR2(4000),
    avg_rating NUMBER(3,1) DEFAULT 0
);

CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL UNIQUE,
    email VARCHAR2(100) UNIQUE,
    password VARCHAR2(100) NOT NULL,
    join_date DATE DEFAULT SYSDATE
);

CREATE TABLE reviews (
    review_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movie_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL,
    rating NUMBER(3,1) CHECK (rating >= 0 AND rating <= 10),
    review_comment VARCHAR2(4000),
    review_date DATE DEFAULT SYSDATE,
    CONSTRAINT fk_movie FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT uq_review UNIQUE (movie_id, user_id)
);

-- ============================================
-- 3. 평균 평점 자동 갱신 트리거
-- ============================================
CREATE OR REPLACE TRIGGER trg_update_avg_rating
FOR INSERT OR UPDATE OR DELETE ON reviews
COMPOUND TRIGGER

    TYPE movie_id_assoc_array_t IS TABLE OF BOOLEAN INDEX BY PLS_INTEGER;
    g_movie_ids movie_id_assoc_array_t;

    AFTER EACH ROW IS
    BEGIN
        IF INSERTING OR UPDATING THEN
            g_movie_ids(:NEW.movie_id) := TRUE;
        ELSIF DELETING THEN
            g_movie_ids(:OLD.movie_id) := TRUE;
        END IF;
    END AFTER EACH ROW;

    AFTER STATEMENT IS
        v_avg NUMBER(3,1);
        v_movie_id PLS_INTEGER;
    BEGIN
        v_movie_id := g_movie_ids.FIRST;

        WHILE v_movie_id IS NOT NULL
        LOOP
            SELECT NVL(ROUND(AVG(rating), 1), 0)
            INTO v_avg
            FROM reviews
            WHERE movie_id = v_movie_id;

            UPDATE movies
            SET avg_rating = v_avg
            WHERE movie_id = v_movie_id;
            
            v_movie_id := g_movie_ids.NEXT(v_movie_id);
        END LOOP;

    END AFTER STATEMENT;

END trg_update_avg_rating;
/
-- ============================================
-- CinemaInfo 프로젝트 DB 스키마 초기화 스크립트
-- Oracle XE 21c 기준
-- ============================================

-- 1. 기존 트리거 / 테이블 삭제 (재생성 시 충돌 방지)
BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER trg_update_avg_rating';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN -- 트리거가 없는 경우 무시
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE reviews CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN -- 테이블이 없는 경우 무시
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE movies CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE users CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

-- ============================================
-- 2. 테이블 생성
-- ============================================

-- 영화 테이블
CREATE TABLE movies (
    movie_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    image_path VARCHAR2(500),
    release_date DATE,
    duration NUMBER(5) CHECK (duration > 0),
    audience NUMBER(10) DEFAULT 0,
    genre VARCHAR2(50),
    country VARCHAR2(50),
    director VARCHAR2(100),
    main_actor VARCHAR2(100),
    description VARCHAR2(4000),
    avg_rating NUMBER(3,1) DEFAULT 0   -- 0.0 ~ 10.0 점
);

-- 사용자 테이블
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL UNIQUE,
    email VARCHAR2(100) UNIQUE,
    password VARCHAR2(100) NOT NULL,
    join_date DATE DEFAULT SYSDATE
);

-- 리뷰 테이블
CREATE TABLE reviews (
    review_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movie_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL,
    rating NUMBER(3,1) CHECK (rating >= 0 AND rating <= 10),
    review_comment VARCHAR2(4000),
    review_date DATE DEFAULT SYSDATE,
    CONSTRAINT fk_movie FOREIGN KEY (movie_id) 
        REFERENCES movies(movie_id) ON DELETE CASCADE,   -- 영화 삭제 시 리뷰 삭제
    CONSTRAINT fk_user FOREIGN KEY (user_id) 
        REFERENCES users(user_id) ON DELETE CASCADE,     -- 유저 탈퇴 시 리뷰 삭제
    CONSTRAINT uq_review UNIQUE (movie_id, user_id)      -- 유저당 영화당 리뷰 1개 제한
);

-- ============================================
-- 3. 평균 평점 자동 갱신 트리거
-- ============================================
CREATE OR REPLACE TRIGGER trg_update_avg_rating
AFTER INSERT OR UPDATE OR DELETE ON reviews
FOR EACH ROW
DECLARE
    v_avg NUMBER(3,1);
BEGIN
    IF INSERTING OR UPDATING THEN
        SELECT NVL(ROUND(AVG(rating),1),0)
        INTO v_avg
        FROM reviews
        WHERE movie_id = :NEW.movie_id;

        UPDATE movies
        SET avg_rating = v_avg
        WHERE movie_id = :NEW.movie_id;

    ELSIF DELETING THEN
        SELECT NVL(ROUND(AVG(rating),1),0)
        INTO v_avg
        FROM reviews
        WHERE movie_id = :OLD.movie_id;

        UPDATE movies
        SET avg_rating = v_avg
        WHERE movie_id = :OLD.movie_id;
    END IF;
END;
/
